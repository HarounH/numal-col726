Given:
	n // The number of sites
	D // A n*n matrix which represents distances between sites...
	k // The dimensionality of your output map.
Return:
	Pos // The positions of all points in k dimensions.

Basically, P is a good low dimensional representation of D...
We want to treat this as an optimization problem...

Since I enjoy markov chains, let us think of the map as a graph on which a random walk can be performed.
Assume that we have a random walker that moves around on the graph, as follows:
At each point in the graph, there are (n-1) paths that the walker can take.
P(x,y), the probability of transition from x to y is D[x,y]/D[x] where D[x] = \sum_{z:z~x} D[x,z]

Let Q be the probability distribution generated by using Pos. i.e., Q[x,y] = ||(Pos[x] - Pos[y])|| / (\sum_{z} ||(Pos[x] - Pos[z])|| )

Then, the problem simply reduces to making P and Q distributions similar, where P is the "true" distribution. 
Hence, the optimization problem is to minimize the KL divergence between P,Q, i.e., D_{KL}(P||Q)

The reason why this should make a good map is because a random walker will think of D as coming from Pos. 
And thats a good definition because everything is a random walk.
